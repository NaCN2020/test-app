{"version":3,"sources":["FileField.js","showfiles.js","showcontent.js","App.js","index.js"],"names":["FileField","props","once_submit","files","state","file_names","map","f","name","i","reader","FileReader","onload","localStorage","setItem","result","readAsText","length","style","backgroundColor","tips","clear","bind","this","setState","objFile","document","getElementById","temp","slice","tempNames","indexOf","alert","push","innerHTML","file_name","split","index","fileList","file","key","toString","onClick","liClick","className","type","id","onDragEnter","dragEnter","onDragLeave","dragLeave","onDrop","dropFile","onChange","onFileNumChange","to","color","React","Component","Showfiles","len","res","path","pathname","Showcontent","location","getItem","App","exact","component","ReactDOM","render"],"mappings":"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","file":"static/js/main.361523a2.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from \"react-router-dom\"\nimport './index.css';\n\n\n//这是主页home，也就是文件拖拽页面;\nclass FileField extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            style: {backgroundColor: \"#FFFFCC\"},\n            tips: \"no file has been added\",\n            files: [],\n        };\n        //为了在回调函数中使用this，必须进行绑定；\n        this.clear = this.clear.bind(this);\n        this.once_submit = this.once_submit.bind(this);\n        //this.show_all = this.show_all.bind(this);\n    }\n\n    //文件进入拖拽区\n    dragEnter(){\n        this.setState({\n            style: {backgroundColor: \"#FFFF66\"},\n        })\n    }\n\n    //文件离开拖拽区\n    dragLeave(){\n        this.setState({\n            style: {backgroundColor: \"#FFFFCC\"},\n        })\n    }\n\n    //完成文件拖拽\n    dropFile() {\n        this.setState({\n            style: {backgroundColor: \"#FFFFCC\"},\n        });\n    }\n\n    onFileNumChange(){\n        let objFile = document.getElementById(\"file_input\").files[0];\n        let temp = this.state.files.slice();\n        const tempNames = temp.map(f => f.name);\n        //console.log(tempNames);\n        if(!objFile){\n            return ;\n        }\n        if(tempNames.indexOf(objFile.name)>-1){\n            alert(\"File already exists\");\n            return ;\n        }\n        temp.push(objFile);\n        this.setState({\n            tips: temp.length + \" file has been added\",\n            files: temp,\n        });\n        //console.log(temp[temp.length-1].name);\n    }\n\n    clear(){\n        this.setState({\n            tips: \"no file has been added\",\n            files: [],\n        });\n        //清除showBox内容；\n        const showBox = document.getElementById(\"showBox\");\n        showBox.innerHTML = \"\";\n        //清理所有的localstorage；\n        localStorage.clear();   \n    }\n\n    liClick(file_name){\n        const temp = file_name.split('.');\n        //分隔开文件名和后缀名，进而判断是够符合要求；\n        const support = [\"docx\",\"jpg\",\"txt\", \"html\", \"md\", \"css\", \"js\"];\n        if(support.indexOf(temp[temp.length-1])===-1){\n            const showBox = document.getElementById(\"showBox\");\n            showBox.innerHTML = \"Can only preview .docx, .jpg, .txt, .html, .md, .css, .js files\";\n            return ;\n        }\n        const files = this.state.files;\n        //console.log(files);\n        //把文件名name提取出来,放进file_names列表，剩余的内容不要；\n        const file_names = files.map(f => f.name); \n        //console.log(file_names);\n        const index = file_names.indexOf(file_name);\n        //初始化一个FileReader对象\n        let reader = new FileReader();\n        reader.onload = function() {\n            //保存到localstorage里面；\n            //localStorage.setItem(file_name, reader.result);  \n            if(reader.result) {\n                //读取结果放进showBox里进行显示；\n                //reader.result就是读取出来的内容结果；\n                const showBox = document.getElementById(\"showBox\");  \n                showBox.innerHTML = reader.result;\n            }\n        };\n        //gb2312方式读取文件内容，防止乱码；\n        reader.readAsText(files[index],'gb2312');\n        //reader.readAsText(files[index],'utf-8');\n    };\n\n    //点击submit所有的数据能全部保存到localstorage里面；\n    once_submit=()=>{\n        const files = this.state.files;\n        //map方式获取文件名，剩余内容不需要；\n        const file_names = files.map(f => f.name);\n        //console.log(file_names); \n        //console.log(file_names.length);\n        for(let i=0;i<file_names.length;i++)\n        {\n            //初始化一个FileReader对象\n            let reader = new FileReader();\n            reader.onload = function() {\n                //将上传的文件保存进localstorage中，可使用localstorage的setItem方法；\n                localStorage.setItem(file_names[i], reader.result);  \n            };\n            //gb2312方式读取文件内容，防止乱码；\n            reader.readAsText(files[i],'gb2312');\n        }\n    }\n\n    render() {\n        //显示所有拖拽的文件名；\n        const files = this.state.files;\n        //console.log(files);\n        const fileList = files.map(file => {\n            //产生点击效果，点击文件名可以在showbox中显示文件内容；\n            return(<li key={file.name.toString()} onClick={() => this.liClick(file.name)}>{file.name}</li>);  \n        });\n        return (\n            <div className=\"fileField\">\n                <p className=\"tips1\">Drop files to the following box</p>\n                <div className={\"dropBox\"} style={this.state.style}>\n                    <span className={\"tips3\"}> {this.state.tips} </span>\n                    <input type={\"file\"} className={\"file_input\"} id={\"file_input\"}\n                           onDragEnter={() => this.dragEnter()}\n                           onDragLeave={() => this.dragLeave()}\n                           onDrop={() => this.dropFile()}\n                           onChange={() => this.onFileNumChange()}/>\n                </div>\n                <div className={\"file_list_container\"}>\n                    <div className={\"showFile\"}>\n                        <textarea id={\"showBox\"}/>     {/*textarea多行文本框；*/}\n                    </div>\n                    <ul className={\"file_ul\"}>\n                        {fileList}\n                    </ul>\n                </div>\n                <button className=\"submit\" onClick={this.once_submit}> submit </button>\n                <button className=\"clear\" onClick={this.clear}> clear </button>\n                <Link to=\"/Showfiles\" style={{color:'black'}}> \n                    <div> show all files </div>\n                </Link>\n                {/*<button className=\"show_all\" onClick={this.show_all}> show all files</button>*/}\n            </div>\n        );\n    }\n}\n\n/*\nReactDOM.render(\n    <div className={\"fUpload_area\"}>\n        <FileField />\n    </div>,\n  document.getElementById('root')\n);\n*/\n\nexport default FileField;","//这也就是我们想要展示文件的页面；\n//哪个页面需要路由文件，哪个页面就把配置的路由引入进来；\n\nimport React from \"react\"\nimport {Link} from \"react-router-dom\"\n\nclass Showfiles extends React.Component{\n    render(){\n        //len保存上传至localstorage的文件数目；\n        const len=localStorage.length;\n        //res存放结果；\n        let res=[];\n        //给所有上传至localstorage的文件，并在页面上显示出来的文件名加上链接；\n        for(let i=0;i<len;i++)\n        {\n            //name保存获取的文件名；\n            const name=localStorage.key(i);        \n            //path变量保存路径和文件名；    \n            var path={\n                pathname:'/Showcontent',  //路径名\n                state:name,               //文件名\n            }\n            //以链接方式显示\n            res.push(<div>\n                    <Link to={path} style={{color:'black'}}>\n                        {/*显示文件名称，可以点击进行页面跳转*/} \n                        <div> {localStorage.key(i)} </div>   \n                    </Link>\n                    <div> {\"下载\"}</div></div>\n                    )\n            //res.push(<div>{localStorage.key(i)}</div>);\n        }\n        //渲染；\n        return(\n            <div>\n                以下是上传至localstorage的文件，点击显示文件内容：\n                {res}\n            </div>\n        )\n    }\n}\n\n//可以被外部使用；\nexport default Showfiles;","import React from \"react\"\n\nclass Showcontent extends React.Component{\n    render(){\n        //let res=[];\n        //res.push(<div> {localStorage.getItem(localStorage.key(0))} </div>)\n        return(\n            <div>\n                {/*这里this.props.location.state就等于showfiles文件里面的state值，也就是文件名*/}\n                {this.props.location.state}  \n\n                {/*显示对应文件名的内容，使用localstorage的getItem方法来获取*/}\n                {<div> {localStorage.getItem(this.props.location.state)} </div>}\n                \n                {/*res*/}\n            </div>\n        )\n    }\n}\n//可以被外部使用；\nexport default Showcontent;","import React from 'react';\nimport { HashRouter as Router,Route} from 'react-router-dom';\nimport FileField from './FileField';\nimport Showfiles from './showfiles';\nimport Showcontent from './showcontent';\n\n//App是路由配置文件；\nclass App extends React.Component {\n  render(){\n    return(\n      <Router >\n        <div>\n          {/*exact代表不渲染跳转之前的主页内容,否则页面内容会叠加*/}\n          {/*path代表跳转页面后，需要加上的的url*/}\n          <Route exact path=\"/\" component={FileField} />\n          <Route path=\"/Showfiles\" component={Showfiles} />\n          <Route path=\"/Showcontent\" component={Showcontent} />\n        </div>\n      </Router>\n    )\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <div className={\"fUpload_area\"}>\n    <App />\n  </div>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}